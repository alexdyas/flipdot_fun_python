# Represents the flipdot display as a matrix 7x28
# 0,0 is the top left hand corner
# 27,6 is the bottom right

# Dots are either True of False, On / Off, Black White

# Most of the methods will not result in anything sent to the display. The display method dumps the internal representation to the display

# Only handles a single 7x28 display as that's all I have at the moment

import serial
from serial import (
    PARITY_NONE,
    EIGHTBITS,
    STOPBITS_ONE,
)
import random

class Flipdot:

  # Class attributes

  # Display dimensions
  displayWidth=28
  displayHeight=7

  # Serial
  serialPortDevice = ''
  serialBaudrate = 0

  # Internal matrix to represent display
  displaybuffer = []

  # Byte array that will actually be sent to the serial port
  displaybytearray = bytearray([
      0x80,  # header
      0x83,  # 28 bytes refresh
      0xFF,  # display address, FF == all displays
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # 28 bytes data
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x8F #EOT
  ])

  characters =  [ [ [0,0,1,0,0],
                    [0,1,1,0,0],
                    [1,0,1,0,0],
                    [0,0,1,0,0],
                    [0,0,1,0,0],
                    [0,0,1,0,0],
                    [1,1,1,1,1]
                  ],

  char_2 = {  {0,1,1,1,0},
                    {1,0,0,0,1},
                    {0,0,0,0,1},
                    {0,0,1,1,0},
                    {0,1,0,0,0},
                    {1,0,0,0,0},
                    {1,1,1,1,1} };

            ]



  # Letters
  letters = { 'A' : [0x7e,0x7f,0x09,0x09,0x7f,0x7e],
              'B' : [0x7f,0x7f,0x49,0x49,0x7f,0x36],
              'C' : [0x3e,0x7f,0x41,0x41,0x63,0x22],
              'D' : [0x7f,0x7f,0x41,0x41,0x7f,0x3e],
              'E' : [0x7f,0x7f,0x49,0x49,0x49,0x41],
              'F' : [0x7f,0x7f,0x09,0x09,0x09,0x01],
              'G' : [0x3e,0x7f,0x41,0x51,0x73,0x32],
              'H' : [0x7f,0x7f,0x08,0x08,0x7f,0x7f],
              'I' : [0x00,0x41,0x7f,0x7f,0x41,0x00],
              'J' : [0x30,0x70,0x41,0x7f,0x3f,0x01],
              'K' : [0x7f,0x7f,0x1c,0x36,0x63,0x41],
              'L' : [0x7f,0x7f,0x40,0x40,0x40,0x40],
              'M' : [0x7f,0x7f,0x06,0x0c,0x06,0x7f,0x7f],
              'N' : [0x7f,0x7f,0x06,0x0c,0x18,0x7f,0x7f],
              'O' : [0x3e,0x7f,0x41,0x41,0x7f,0x3e,0x00],
              'P' : [0x7f,0x7f,0x11,0x11,0x1f,0x0e],
              'Q' : [0x1e,0x3f,0x21,0x31,0x7f,0x5e],
              'R' : [0x7f,0x7f,0x19,0x39,0x6f,0x46],
              'S' : [0x26,0x6f,0x49,0x49,0x7b,0x32],
              'T' : [0x03,0x01,0x7f,0x7f,0x01,0x03],
              'U' : [0x3f,0x7f,0x40,0x40,0x7f,0x7f],
              'V' : [0x1f,0x3f,0x60,0x60,0x3f,0x1f],
              'W' : [0x7f,0x7f,0x30,0x18,0x30,0x7f,0x7f],
              'X' : [0x63,0x77,0x1c,0x08,0x1c,0x77,0x63],
              'Y' : [0x07,0x0f,0x78,0x78,0x0f,0x07],
              'Z' : [0x61,0x71,0x59,0x4d,0x47,0x43],
              'a' : [0x20,0x74,0x54,0x54,0x7c,0x78],
              'b' : [0x7f,0x7f,0x48,0x48,0x78,0x30],
              'c' : [0x38,0x7c,0x44,0x44,0x6c,0x28],
              'd' : [0x30,0x78,0x48,0x48,0x7f,0x7f],
              'e' : [0x38,0x7c,0x54,0x54,0x5c,0x18],
              'f' : [0x10,0x7e,0x7f,0x11,0x13,0x02],
              'g' : [0x0c,0x5e,0x52,0x52,0x7e,0x3e],
              'h' : [0x7f,0x7f,0x08,0x08,0x78,0x70],
              'i' : [0x00,0x40,0x7a,0x7a,0x40,0x00],
              'j' : [0x30,0x70,0x40,0x7d,0x3d,0x00],
              'k' : [0x7f,0x7f,0x10,0x38,0x6c,0x44],
              'l' : [0x00,0x00,0x7f,0x7f,0x00,0x00],
              'm' : [0x7c,0x7c,0x18,0x70,0x18,0x7c,0x7c],
              'n' : [0x7c,0x7c,0x0c,0x0c,0x7c,0x78],
              'o' : [0x38,0x7c,0x44,0x44,0x7c,0x38],
              'p' : [0x7e,0x7e,0x12,0x12,0x1e,0x0c],
              'q' : [0x0c,0x1e,0x12,0x7e,0x7e,0x40,0x60],
              'r' : [0x7c,0x7c,0x04,0x04,0x1c,0x18],
              's' : [0x48,0x54,0x54,0x54,0x54,0x24],
              't' : [0x08,0x08,0x7e,0x7e,0x08,0x08],
              'u' : [0x3c,0x7c,0x40,0x40,0x7c,0x7c],
              'v' : [0x18,0x38,0x60,0x60,0x38,0x18],
              'w' : [0x3c,0x7c,0x40,0x78,0x40,0x7c,0x3c],
              'x' : [0x44,0x6c,0x38,0x38,0x6c,0x44],
              'y' : [0x0c,0x5c,0x50,0x50,0x7c,0x3c],
              'z' : [0x00,0x64,0x74,0x5c,0x4c,0x00],
              '1' : [0x40,0x44,0x7f,0x7f,0x40,0x40],
              '2' : [0x62,0x73,0x51,0x49,0x4f,0x46],
              '3' : [0x22,0x63,0x49,0x49,0x7f,0x36],
              '4' : [0x18,0x14,0x12,0x7f,0x7f,0x10],
              '5' : [0x27,0x67,0x45,0x45,0x7d,0x39],
              '6' : [0x3e,0x7f,0x49,0x49,0x7b,0x32],
              '7' : [0x03,0x03,0x71,0x7d,0x0f,0x03],
              '8' : [0x36,0x7f,0x49,0x49,0x7f,0x36],
              '9' : [0x26,0x6f,0x49,0x49,0x7f,0x3e],
              '0' : [0x3e,0x7f,0x49,0x45,0x7f,0x3e]
            }

  # Constructor
  def __init__(self,passed_serialPortDevice,passed_serialBaudrate):

    self.serialPortDevice = passed_serialPortDevice
    self.serialBaudrate = passed_serialBaudrate

    self.serialPort = serial.Serial(self.serialPortDevice,self.serialBaudrate)

    if self.serialPort.isOpen() :
      self.serialPort.close()
    self.serialPort.open()

    # Initialise the display 2D 'array' (Actually list of lists)
    self.displaybuffer = [[False for x in range(self.displayWidth)] for y in range(self.displayHeight)]

  # Set dot at x,y
  def setdot(self,x,y,state):
    self.displaybuffer[y][x] = state

  # Flip the dot at x,y. White becomes black, visa versa
  def reversedot(self,x,y):
    self.displaybuffer[x][y] = not self.displaybuffer[x][y]

  # Set the whole buffer to On or Off
  def reset(self,state):
    self.displaybuffer = [[state for x in range(self.displayWidth)] for y in range(self.displayWidth)]

  # Dump the internal buffer to the display by converting it to bytearray and
  # then push it out the serial port
  def display(self):
    # Header bytes
    self.displaybytearray = bytearray([
      0x80,  #header
      0x83,  # 28 bytes refresh
      0xFF,  # address
    ])

    # Step through the displaybuffer, one column at a time, converting each string of
    # 7 bits to a hex value
    for x in range(self.displayWidth) :
      binarystring = ''
      for y in range(self.displayHeight) :
        if self.displaybuffer[y][x] :
          binarystring = '1' + binarystring
        else:
          binarystring = '0' + binarystring

      # Translate binary to integer value
      self.displaybytearray.append(int(binarystring, 2))

    # End of transmission byte
    self.displaybytearray.append(0x8F)

    # Throw it all down the pipe
    self.serialPort.write(self.displaybytearray)

  def randomfade(self,state) :
    randomlist=[]
    for x in range(self.displayHeight) :
      for y in range(self.displayWidth) :
        randomlist.append([x,y])
    random.shuffle(randomlist)
    for item in randomlist:
      self.setdot(item[0],item[1],True)
      self.display()

  # Print letter at pos
  def text_letter(self,letter,pos) :
    for x in range(len(self.char_1)):
      for y in range(len(self.char_1[x])) :
        self.displaybuffer[x][y]=self.char_1[x][y]

  # Shift whole display by amount. Positive shifts left to right, negative
  #  right to left. Wrap around.
  def shift(self,amount) :
    print("Complete me")

  # Debug routine to dump contents of internal display buffer to stdout
  def dumpdisplaybuffer(self):
    for y in range(self.displayHeight) :
      for x in range(self.displayWidth) :
        if self.displaybuffer[y][x] :
          print(1,end='')
        else :
          print(0,end='')
      print()